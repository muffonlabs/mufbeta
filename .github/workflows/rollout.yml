name: rollout

on:
  workflow_dispatch:
    inputs:
      version: 
        required: true
        description: input version number
        type: string

permissions: write-all

jobs:
  build:
    strategy:
      matrix:
        os:
          - macos-latest
          - windows-latest
          - ubuntu-latest

    runs-on: ${{ matrix.os }}

    steps:
      - name: start the rollout
        run: echo "Rolling out v${{ inputs.version }}"

      - name: Set up checkout
        uses: actions/checkout@v4

      - name: clone muffon
        run: git clone https://github.com/staniel359/muffon

      - name: TEMP - DELETE NPMRC (Cross-Platform)
        run: |
          if [ -f "muffon/.npmrc" ]; then rm muffon/.npmrc; fi
        shell: bash
        if: runner.os != 'Windows'
      
      - name: TEMP - DELETE NPMRC (Windows)
        run: |
          if (Test-Path "muffon/.npmrc") { Remove-Item -Path "muffon/.npmrc" -Force }
        shell: pwsh
        if: runner.os == 'Windows'

      - uses: pnpm/action-setup@v4

      - name: Set up Electron cache
        uses: actions/cache@v4
        with:
          path: ${{ github.workspace }}/.cache/electron
          key: ${{ runner.os }}-electron-cache-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: ${{ runner.os }}-electron-cache-

      - name: Set up Electron Builder cache
        uses: actions/cache@v4
        with:
          path: ${{ github.workspace }}/.cache/electron-builder
          key: ${{ runner.os }}-electron-builder-cache-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: ${{ runner.os }}-electron-builder-cache-

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 23
          cache: pnpm

      - name: patch muffon source
        run: pnpm patch-source

      - name: patch muffon's package.json
        run: pnpm patch-package -v ${{ inputs.version }}

      - name: Set up dependencies
        run: pnpm -C muffon install

      - name: Lint
        run: pnpm -C muffon lint

      - name: Create .env file
        run: |
          cd muffon
          touch .env
          echo VITE_APP_ELECTRON_STORE_KEY=${{ secrets.ELECTRON_STORE_KEY }} >> .env
          echo VITE_APP_SHARE_ENCRYPTION_KEY=${{ secrets.SHARE_ENCRYPTION_KEY }} >> .env
          echo VITE_APP_ANONYMOUS_TOKEN=${{ secrets.ANONYMOUS_TOKEN }} >> .env
          echo VITE_APP_DISCORD_CLIENT_ID=${{ secrets.DISCORD_CLIENT_ID }} >> .env
          cat .env
          cd ../

      - name: Install packages (Linux-only)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y flatpak flatpak-builder libarchive-tools rpm
          flatpak remote-add --if-not-exists --user flathub https://flathub.org/repo/flathub.flatpakrepo

      - name: Release
        env:
          ELECTRON_CACHE: ${{ github.workspace }}/.cache/electron
          ELECTRON_BUILDER_CACHE: ${{ github.workspace }}/.cache/electron-builder
          GH_TOKEN: ${{ github.token }}
        run: pnpm -C muffon release

      - name: Release macos x64 # We do it separately without defining in electron-builder.json to prevent the distribution.xml not found error
        if: matrix.os == 'macos-latest'
        env:
          ELECTRON_CACHE: ${{ github.workspace }}/.cache/electron
          ELECTRON_BUILDER_CACHE: ${{ github.workspace }}/.cache/electron-builder
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: pnpm -C muffon release:electron --x64
      - name: Release linux arm64 # to prevent unnecessary build locally
        if: matrix.os == 'ubuntu-latest'
        env:
          ELECTRON_CACHE: ${{ github.workspace }}/.cache/electron
          ELECTRON_BUILDER_CACHE: ${{ github.workspace }}/.cache/electron-builder
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: pnpm -C muffon release:electron --arm64
